service: loi-notify

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'development'}
  region: 'ap-southeast-2'
  memorySize: 128
  timeout: 28
  logRetentionInDays: 90
  deploymentBucket:
    name: ${ssm:deployment-artifacts-bucket}
  environment:
    LOI_PAGE_URL: https://www.health.govt.nz/our-work/diseases-and-conditions/covid-19-novel-coronavirus/covid-19-health-advice-public/contact-tracing-covid-19/covid-19-contact-tracing-locations-interest
    CHANGES_TOPIC_ARN: ${self:custom.changes-topic.arn}
    NEW_RELIC_NO_CONFIG_FILE: true
    NEW_RELIC_SERVERLESS_MODE_ENABLED: true
    NEW_RELIC_APP_NAME: ${self:service}-${self:provider.stage}
    NEW_RELIC_ACCOUNT_ID: ${ssm:newrelic-account-id}
    NEW_RELIC_TRUSTED_ACCOUNT_KEY: ${ssm:newrelic-account-id}
    NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: true

package:
  excludeDevDependencies: false
  exclude:
    - '**'
  include:
    - dist

plugins:
  - serverless-prune-plugin
  - serverless-plugin-common-excludes
  - serverless-plugin-include-dependencies
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters
  # - serverless-log-forwarding

custom:
  logForwarding:
    destinationARN: ${ssm:newrelic-log-ingestion}
    filterPattern: '?REPORT ?NR_LAMBDA_MONITORING ?"Task timed out" ?RequestId'
  serverless-iam-roles-per-function:
    defaultInherit: true
  changes-topic:
    name: '${self:service}-changes-${self:provider.stage}'
    arn: arn:aws:sns:${self:provider.region}:${ssm:account-id-aws}:${self:custom.changes-topic.name}
  storage-bucket:
    name: '${self:service}-storage-${self:provider.stage}'

functions:
  sync-locations:
    handler: dist/endpoints/sync-locations.handler
    events:
      - schedule: rate(15 minutes)
    environment:
      STORAGE_BUCKET_NAME: ${self:custom.storage-bucket.name}
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - sns:Publish
        Resource: ${self:custom.changes-topic.arn}
      - Effect: 'Allow'
        Action:
          - s3:PutObject
          - s3:PutObjectTagging
          - s3:GetObject
        Resource: '#{StorageBucket.Arn}/*'
  tweet-changes:
    handler: dist/endpoints/tweet-changes.handler
    events:
      - sns:
          arn: ${self:custom.changes-topic.arn}
    environment:
      TWITTER_CONSUMER_KEY: ${ssm:/${self:service}/${self:provider.stage}/twitter/consumer-key~true}
      TWITTER_CONSUMER_SECRET: ${ssm:/${self:service}/${self:provider.stage}/twitter/consumer-secret~true}
      TWITTER_ACCESS_TOKEN_KEY: ${ssm:/${self:service}/${self:provider.stage}/twitter/access-key~true}
      TWITTER_ACCESS_TOKEN_SECRET: ${ssm:/${self:service}/${self:provider.stage}/twitter/access-secret~true}

resources:
  Resources:
    ChangesTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.changes-topic.name}

    StorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.storage-bucket.name}
